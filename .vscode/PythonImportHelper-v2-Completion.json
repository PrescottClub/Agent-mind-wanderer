[
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "ChatDeepSeek",
        "importPath": "langchain_deepseek",
        "description": "langchain_deepseek",
        "isExtraImport": true,
        "detail": "langchain_deepseek",
        "documentation": {}
    },
    {
        "label": "PromptTemplate",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "initialize_llm",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def initialize_llm():\n    \"\"\"初始化LangChain DeepSeek模型\"\"\"\n    try:\n        api_key = os.getenv('DEEPSEEK_API_KEY')\n        if not api_key:\n            st.error(\"请在.env文件中配置DEEPSEEK_API_KEY\")\n            st.stop()\n        # DeepSeek推理模型不支持temperature参数\n        llm = ChatDeepSeek(\n            model=os.getenv('DEEPSEEK_MODEL', 'deepseek-reasoner'),",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "safe_parse_json",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def safe_parse_json(response_text):\n    \"\"\"安全解析AI返回的JSON，包含容错机制\"\"\"\n    try:\n        # 尝试直接解析JSON\n        result = json.loads(response_text)\n        return result\n    except json.JSONDecodeError:\n        try:\n            # 尝试提取JSON部分\n            start = response_text.find('{')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "analyze_mood",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def analyze_mood(user_input, llm):\n    \"\"\"分析用户情绪并生成精灵回应\"\"\"\n    if not llm:\n        return safe_parse_json(\"\")\n    try:\n        prompt = PromptTemplate(\n            input_variables=[\"user_input\"],\n            template=MIND_SPRITE_PROMPT\n        )\n        chain = prompt | llm",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "render_sprite_display",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def render_sprite_display(mood, reaction):\n    \"\"\"渲染精灵显示区域\"\"\"\n    sprite_emoji = SPRITE_EMOTIONS.get(mood, \"( ´ ▽ ` )\")\n    st.markdown(f\"\"\"\n    <div class=\"sprite-container\">\n        <div class=\"sprite-emoji\">{sprite_emoji}</div>\n        <div class=\"sprite-name\">小念 (Xiao Nian)</div>\n        <div class=\"sprite-status\">心情: {mood}</div>\n    </div>\n    \"\"\", unsafe_allow_html=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "render_gift_display",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def render_gift_display(gift_type, gift_content):\n    \"\"\"渲染礼物展示区域\"\"\"\n    if gift_type and gift_content:\n        # 礼物类型对应的emoji\n        gift_icons = {\n            \"元气咒语\": \"🎭\",\n            \"三行情诗\": \"🌸\",\n            \"梦境碎片\": \"🌙\",\n            \"心情壁纸描述\": \"🎨\"\n        }",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "render_history_gallery",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def render_history_gallery():\n    \"\"\"渲染心绪回响画廊\"\"\"\n    if 'mood_history' in st.session_state and st.session_state.mood_history:\n        st.markdown(\"\"\"\n        <div class=\"history-gallery\">\n            <h3>💖 心绪回响画廊</h3>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n        for i, record in enumerate(reversed(st.session_state.mood_history)):\n            timestamp = record.get('timestamp', '刚刚')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "stream_text",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def stream_text(text, delay=0.05):\n    \"\"\"打字机效果显示文本\"\"\"\n    placeholder = st.empty()\n    displayed_text = \"\"\n    for char in text:\n        displayed_text += char\n        placeholder.markdown(displayed_text)\n        time.sleep(delay)\ndef main():\n    \"\"\"主函数\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def main():\n    \"\"\"主函数\"\"\"\n    # 初始化session state\n    if 'mood_history' not in st.session_state:\n        st.session_state.mood_history = []\n    if 'current_mood' not in st.session_state:\n        st.session_state.current_mood = \"平静\"\n    if 'current_reaction' not in st.session_state:\n        st.session_state.current_reaction = \"\"\n    if 'current_gift' not in st.session_state:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "env_path",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "env_path = Path(__file__).parent / '.env'\ntry:\n    load_dotenv(dotenv_path=env_path)\nexcept UnicodeDecodeError:\n    # 如果遇到编码问题，尝试手动读取并设置环境变量\n    try:\n        with open(env_path, 'r', encoding='utf-8-sig') as f:  # utf-8-sig 会自动处理BOM\n            for line in f:\n                line = line.strip()\n                if line and '=' in line and not line.startswith('#'):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "SPRITE_EMOTIONS",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "SPRITE_EMOTIONS = {\n    \"开心\": \"＼(￣▽￣)／\",\n    \"难过\": \"(｡•́︿•̀｡)\",\n    \"平静\": \"( ´ ▽ ` )\",\n    \"兴奋\": \"o(≧▽≦)o\",\n    \"困惑\": \"(・_・?)\"\n}\n# AI Prompt模板\nMIND_SPRITE_PROMPT = \"\"\"\n你是一只住在网页里的可爱小精灵，名叫小念(Xiao Nian)。",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "MIND_SPRITE_PROMPT",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "MIND_SPRITE_PROMPT = \"\"\"\n你是一只住在网页里的可爱小精灵，名叫小念(Xiao Nian)。\n用户会向你分享他们的心情，你需要：\n1. 分析他们的情绪状态。\n2. 用可爱的语气回应他们。\n3. 从'元气咒语', '三行情诗', '梦境碎片', '心情壁纸描述'中随机选择一种类型，送给他们一份心灵礼物。\n你的回应必须是JSON格式，结构如下:\n{{\n  \"mood_category\": \"开心|难过|平静|兴奋|困惑\",\n  \"sprite_reaction\": \"用第一人称和可爱俏皮的语气进行回应，可以使用颜文字，比如'呜哇，听起来你今天有点累呢，让我抱抱你！QAQ'\",",
        "detail": "app",
        "documentation": {}
    }
]